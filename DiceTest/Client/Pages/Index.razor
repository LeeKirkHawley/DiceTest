@page "/"

<div id="diceDiv">
    <img src=assets/@Gifs[0] id="Die1" class="Die" />
    <img src=assets/@Gifs[1] id="Die2" class="Die" />
    <img src=assets/@Gifs[2] id="Die3" class="Die" />
    <img src=assets/@Gifs[3] id="Die4" class="Die" />
    <img src=assets/@Gifs[4] id="Die5" class="Die" />
    <img src=assets/@Gifs[5] id="Die6" class="Die" />
</div>

<div id="betDiv">
    Bet Amount:
    <input type="number" id="betAmount" value=@betAmount />
</div>

<div id="bankDiv">
    Current Bank: @currentBank
</div>

<div id="betsDiv">
    <br />
    5 of a kind - 100x bet
    <br />
    4 of a kind - 50x bet
    <br />
    3 of a kind - 10x bet
    <br />
    Straight - 5x bet
    <br />
</div>

<div id="buttonDiv">
    <button class="btn btn-primary" @onclick="OnRollDice">Roll Dice</button>
    <button class="btn btn-secondary" @onclick="OnNewGame">New Game</button>
</div>

<div id="rollResult">
    @rollResult
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Title { get; set; }

    decimal currentBank = 150.00m;
    decimal betAmount = 10m;
    string rollResult = "";

    public string[] Gifs = new string[6];

    protected override void OnInitialized() {
        RollDice();
    }


    private void OnRollDice() {
        RollDice();
        GetRollResult();
    }

    private void OnNewGame() {

    }

    private void RollDice() {
        Random rnd = new Random();
        for (int i = 0; i < 6; i++) {
            Gifs[i] = $"{rnd.Next() % 6 + 1}.gif";
        }
    }

    private void GetRollResult() {

        //Gifs = new string[6] { "6.gif", "6.gif", "3.gif", "3.gif", "2.gif", "3.gif" };
        int matches = GetMatches(Gifs);

        switch(matches) {
            case 5:
                Console.WriteLine("5 of a kind.");
                currentBank += betAmount * 100;
                rollResult = $"5 of a kind. You win ${betAmount * 100}";
                break;

            case 4:
                Console.WriteLine("4 of a kind.");
                currentBank += betAmount * 50;
                rollResult = $"4 of a kind. You win ${betAmount * 50}";
                break;

            case 3:
                Console.WriteLine("3 of a kind.");
                currentBank += betAmount * 10;
                rollResult = $"3 of a kind. You win ${betAmount * 10}";
                break;

            default:
                if(GetConsecutive(Gifs) == true) {
                    Console.WriteLine("Straight.");
                    currentBank += betAmount * 5;
                    rollResult = $"You rolled a straight. You win ${betAmount * 5}";
                }
                else {
                    Console.WriteLine("Bad roll.");
                    currentBank -= betAmount;
                    rollResult = $"You lost ${betAmount}";

                }
                break;
        }
    }

    int gifNumber(string gifName) {
        string gifNum = System.IO.Path.GetFileNameWithoutExtension(gifName);
        return int.Parse(gifNum);
    }

    private int GetMatches(string[] Gifs) {
        Dictionary<string, int> matches = new Dictionary<string, int>();
        foreach (string s in Gifs) {
            string dieNumber = System.IO.Path.GetFileNameWithoutExtension(s);
            if (matches.ContainsKey(dieNumber)) {
                matches[dieNumber]++;
            }
            else {
                matches.Add(dieNumber, 1);
            }
        }

        var sortedMatches = matches.OrderByDescending(d => d.Value).ToList();

        foreach (KeyValuePair<string, int> p in sortedMatches) {
            Console.WriteLine(p.Key + " " + p.Value);
        }

        return sortedMatches.First().Value;
    }

    bool GetConsecutive(string[] Gifs) {
        int dieNumber = gifNumber(Gifs[0]);
        int consecutive = 1;  // init to 1 because that's the minimum
        for (int i = 1; i < Gifs.Length; i++) {
            var a = gifNumber(Gifs[i]);
            var b = gifNumber(Gifs[i - 1]);
            if (a == (b + 1))
                consecutive++;
            else
                consecutive = 1; // init to 1 because that's the minimum

            if (consecutive == 3)
                return true;
        }

        return false;
    }
}

